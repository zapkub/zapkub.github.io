{"version":3,"sources":["store/index.js","store/useLocalStorage.js","components/TodoFilters.jsx","components/TodoInput.jsx","components/TodoList.jsx","components/Footer.jsx","components/TodoCount.jsx","serviceWorker.js","index.js","App.js"],"names":["defaultState","filter","todos","textInput","TodoStoreContext","React","createContext","TodoStoreConsumer","_ref4","children","react_default","a","createElement","Consumer","value","TodoStoreProvider","_ref5","_useDehydrated","_React$useState","useState","_React$useState2","Object","slicedToArray","loading","setLoading","_React$useState3","_React$useState4","dehydratedState","setHydratedState","useEffect","localforage","getItem","then","state","console","log","useDehydrated","todoAppState","todoStore","initialState","arguments","length","undefined","setFilter","setTodo","_React$useState5","_React$useState6","setTextInput","filterList","onSetFilter","_ref","completed","_ref2","onInputChange","e","target","onTodoTitleChange","index","map","todo","i","title","onCheckTodo","checked","onCheckAllTodo","onRemoveTodo","onSubmitTodo","toConsumableArray","concat","onClearCompletedTodo","_ref3","useTodoList","setItem","Provider","TodoListFilter","active","onClick","href","className","TodoFilters","store_TodoStoreConsumer","filterName","key","TodoFilters_TodoListFilter","TodoInput","Fragment","onKeyPress","placeholder","autoFocus","onChange","TodoItem","onChecked","onRemove","onTitleChange","isEditing","setIsEditing","ref","createRef","current","focus","innerHTML","type","contentEditable","onDoubleClick","onBlur","dangerouslySetInnerHTML","__html","TodoList","_React$useContext","useContext","id","htmlFor","TodoList_TodoItem","assign","Footer","TodoCount","store","Boolean","window","location","hostname","match","ReactDOM","render","store_TodoStoreProvider","TodoInput_TodoInput","TodoList_TodoList","TodoCount_TodoCount","TodoFilters_TodoFilters","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.06a0c3a9.chunk.js","sourcesContent":["import React from \"react\";\nimport { useDehydrated, useHydrated } from \"./useLocalStorage\";\n\nconst defaultState = {\n  filter: \"All\",\n  todos: [],\n  textInput: \"\"\n};\n\nexport function useTodoList(initialState = defaultState) {\n  const [filter, setFilter] = React.useState(initialState.filter);\n  const [todos, setTodo] = React.useState(initialState.todos);\n  const [textInput, setTextInput] = React.useState(initialState.textInput);\n  return {\n    filter,\n    filterList: [\"All\", \"Active\", \"Completed\"],\n    onSetFilter: value => () => setFilter(value),\n    get todos() {\n      switch (filter) {\n        case \"Active\":\n          return todos.filter(({ completed }) => !completed);\n        case \"Completed\":\n          return todos.filter(({ completed }) => completed);\n        case \"All\":\n        default:\n          return todos;\n      }\n    },\n\n    /**\n     * Input box state\n     * and handle\n     */\n    textInput,\n    onInputChange: e => {\n      setTextInput(e.target.value);\n    },\n\n    onTodoTitleChange: index => value => {\n      setTodo(\n        todos.map((todo, i) => {\n          if (i === index) {\n            todo.title = value;\n          }\n          return todo;\n        })\n      );\n    },\n\n    // Todo list action handler\n    onCheckTodo: index => e => {\n      setTodo(\n        todos.map((todo, i) => {\n          if (i === index) {\n            todo.completed = e.target.checked;\n          }\n          return todo;\n        })\n      );\n    },\n\n    onCheckAllTodo: () => e => {\n      setTodo(\n        todos.map(todo => {\n          todo.completed = e.target.checked;\n          return todo;\n        })\n      );\n    },\n\n    onRemoveTodo: index => () => {\n      setTodo(todos.filter((todo, i) => index !== i));\n    },\n    onSubmitTodo: () => {\n      setTodo([\n        ...todos,\n        {\n          title: textInput,\n          completed: false\n        }\n      ]);\n      setTextInput(\"\");\n    },\n    onClearCompletedTodo: () => {\n      setTodo(todos.filter(({ completed }) => !completed));\n    }\n  };\n}\n\nexport const TodoStoreContext = React.createContext();\n\n/**\n * @param {{children: (todoStore: ReturnType<typeof useTodoList>) => void}}\n */\nexport const TodoStoreConsumer = ({ children }) => {\n  return (\n    <TodoStoreContext.Consumer>\n      {value => children(value)}\n    </TodoStoreContext.Consumer>\n  );\n};\n\nexport const TodoStoreProvider = ({ children }) => {\n  /**\n   * Waiting until persist state\n   * loaded\n   */\n  const { loading, dehydratedState } = useDehydrated();\n\n  // Localforage เป็น Async\n  // ก่อนที่จะ load state จาก persistance storage\n  // Provider จะไม่ render children\n  if (loading) {\n    return <div />;\n  }\n\n  const todoStore = useTodoList(dehydratedState);\n  const { todos, textInput, filter } = todoStore;\n\n  // subscribe every effect on\n  // Todo state to store to persistance storage\n  useHydrated({ todos, filter, textInput });\n\n  return (\n    <TodoStoreContext.Provider value={todoStore}>\n      {children}\n    </TodoStoreContext.Provider>\n  );\n};\n","import React from \"react\";\nimport localforage from \"localforage\";\n\nexport function useDehydrated() {\n  const [loading, setLoading] = React.useState(true);\n  const [dehydratedState, setHydratedState] = React.useState();\n\n  /**\n   * Dehydrate state from localstorage\n   * only first time when component mount\n   */\n  React.useEffect(() => {\n    localforage.getItem(\"todoState\").then(state => {\n      if (state) {\n        console.log(\"dehydrated state...\");\n        setHydratedState(state);\n      }\n      setLoading(false);\n    });\n  }, []);\n\n\n  return {\n    loading,\n    dehydratedState\n  };\n}\n\nexport function useHydrated(todoAppState) {\n  React.useEffect(\n    () => {\n      if (!todoAppState) {\n        return;\n      }\n      console.log(\"hydrated state...\");\n      localforage.setItem(\"todoState\", todoAppState);\n    },\n    [todoAppState]\n  );\n}\n","import React from \"react\";\n\nimport { TodoStoreConsumer } from \"../store\";\n\nconst TodoListFilter = ({ active, filter, onClick }) => (\n  <a href=\"/#\" className={active ? \"selected\" : \"\"} onClick={onClick}>\n    {filter}\n  </a>\n);\n\nexport const TodoFilters = () => {\n  return (\n    <TodoStoreConsumer>\n      {({ filterList, onSetFilter, filter }) => (\n        <ul className=\"filters\">\n          {filterList.map(filterName => (\n            <li key={filterName}>\n              <TodoListFilter\n                active={filter === filterName}\n                filter={filterName}\n                onClick={onSetFilter(filterName)}\n              />\n            </li>\n          ))}\n        </ul>\n      )}\n    </TodoStoreConsumer>\n  );\n};\n","import React from \"react\";\nimport { TodoStoreConsumer } from \"../store\";\n\nexport const TodoInput = () => {\n\n\n\n\n\n  return (\n    <TodoStoreConsumer>\n      {({ onSubmitTodo, textInput, onInputChange }) => {\n        const handleInputEnterPress = e => {\n          if (e.key === \"Enter\") {\n            onSubmitTodo();\n          }\n        };\n        return (\n          <>\n            <input\n              onKeyPress={handleInputEnterPress}\n              className=\"new-todo\"\n              placeholder=\"What needs to be done?\"\n              autoFocus\n              value={textInput}\n              onChange={onInputChange}\n            />\n          </>\n        );\n      }}\n    </TodoStoreConsumer>\n  );\n};\n","import React from \"react\";\nimport { TodoStoreContext } from \"../store\";\n\nconst TodoItem = ({ title, completed, onChecked, onRemove, onTitleChange }) => {\n\n  // ตัวอย่างการใช้ Hooks API ใน Function Component\n  // Todo Item แต่ละอันจะมี State ของ Input แยกเพิ่มจัดการ\n  // การแก้ไข Todo นั้นๆ\n  const [isEditing, setIsEditing] = React.useState(false);\n  const ref = React.createRef();\n  function onTitleDoubleClick() {\n    setIsEditing(true);\n  }\n\n  React.useEffect(\n    () => {\n      if (isEditing) {\n        ref.current.focus();\n      } else {\n        // เมื่อ onBlur ให้ update state title\n        // ของ Todo ใน singleton store\n        onTitleChange(ref.current.innerHTML);\n      }\n    },\n    [isEditing]\n  );\n\n  return (\n    <>\n      <input\n        className=\"toggle\"\n        onChange={onChecked}\n        checked={completed}\n        type=\"checkbox\"\n      />\n      <label\n        ref={ref}\n        contentEditable={isEditing}\n        onDoubleClick={onTitleDoubleClick}\n        onChange={onTitleChange}\n        className={isEditing ? \"on-edit\": \"\"}\n        onBlur={() => setIsEditing(false)}\n        dangerouslySetInnerHTML={{ __html: title }}\n      />\n      <button onClick={onRemove} className=\"destroy\" />\n    </>\n  );\n};\n\nexport const TodoList = () => {\n  // นอกจากการใช้ Consumer\n  // React Hooks API อันใหม่\n  // สามารถใช้ useContext API\n  // เพื่อดึง Value ออกมาจาก Provider\n  // ได้เลย\n  const {\n    todos,\n    onRemoveTodo,\n    onCheckTodo,\n    onCheckAllTodo,\n    onTodoTitleChange\n  } = React.useContext(TodoStoreContext);\n\n  return (\n    <>\n      <input\n        onChange={onCheckAllTodo()}\n        id=\"toggle-all\"\n        className=\"toggle-all\"\n        type=\"checkbox\"\n      />\n      <label htmlFor=\"toggle-all\">Mark all as complete</label>\n      <ul className=\"todo-list\">\n        {todos.map((todo, i) => (\n          <li key={i}>\n            <TodoItem\n              {...todo}\n              onTitleChange={onTodoTitleChange(i)}\n              onRemove={onRemoveTodo(i)}\n              onChecked={onCheckTodo(i)}\n            />\n          </li>\n        ))}\n      </ul>\n    </>\n  );\n};\n","import React from \"react\";\nexport default () => {\n  return (\n    <footer className=\"info\">\n      <p>Double-click to edit a todo</p>\n      <p>\n        Written by <a href=\"https://github.com/zapkub/react-in-a-nutshell\">Rungsikorn R</a>\n      </p>\n      <p>\n        Part of <a href=\"http://todomvc.com\">TodoMVC</a>\n      </p>\n    </footer>\n  );\n};\n","import React from \"react\";\nimport { TodoStoreConsumer } from \"../store\";\n\nexport const TodoCount = () => {\n  return (\n    <TodoStoreConsumer>\n      {store => {\n        return (\n          <span className=\"todo-count\">\n            <strong>{store.todos.length}</strong> item\n            {store.todos.length === 1 ? \"\" : \"s\"} left\n          </span>\n        );\n      }}\n    </TodoStoreConsumer>\n  );\n};\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import React from \"react\";\nimport \"todomvc-common/base.css\";\nimport \"todomvc-app-css/index.css\";\nimport { TodoStoreProvider, TodoStoreConsumer } from \"./store\";\nimport { TodoFilters } from \"./components/TodoFilters\";\nimport { TodoInput } from \"./components/TodoInput\";\nimport { TodoList } from \"./components/TodoList\";\nimport Footer from \"./components/Footer\";\nimport { TodoCount } from \"./components/TodoCount\";\n\nexport default () => {\n  return (\n    <TodoStoreProvider>\n      <TodoStoreConsumer>\n        {({ onClearCompletedTodo }) => {\n          return (\n            <>\n              <div className=\"App todoapp\">\n                <header className=\"header\">\n                  <h1>todos</h1>\n                  <TodoInput />\n                </header>\n                <section className=\"main\">\n                  <TodoList />\n                </section>\n                <footer className=\"footer\">\n                  <TodoCount />\n                  <TodoFilters />\n                  <button\n                    className=\"clear-completed\"\n                    onClick={onClearCompletedTodo}\n                  >\n                    Clear completed\n                  </button>\n                </footer>\n              </div>\n              <Footer />\n            </>\n          );\n        }}\n      </TodoStoreConsumer>\n    </TodoStoreProvider>\n  );\n};\n"],"sourceRoot":""}